name: Continuous Deployment

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env: # load from .env file
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${ env.IMAGE_TAG_BACKEND }
  FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT_OR_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.BACKEND_IMAGE }}
            ${{ env.FRONTEND_IMAGE }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Transfer files to server
        run: |
          scp -o StrictHostKeyChecking=no \
            docker-compose.yml \
            .env \
            nginx.conf \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/rust-actix-deploy/

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd ~/rust-actix-deploy
            export IMAGE_TAG_BACKEND=${{ env.BACKEND_IMAGE }}:latest
            export IMAGE_TAG_FRONTEND=${{ env.FRONTEND_IMAGE }}:latest
            docker-compose pull
            docker-compose up -d
            docker system prune -af --volumes
          EOF
