name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request: # Also run checks on Pull Requests
    branches: [main]

env:
  GHCR_REGISTRY: ghcr.io
  IMAGE_BASENAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  lint-test:
    name: Lint & Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend # Run commands within backend dir

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

  build-push:
    name: Build & Push Docker Images
    needs: lint-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase Image Base Name
        id: lowercaser
        run: echo "image_base=$(echo ${{ env.IMAGE_BASENAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Define Image Tags
        id: image_tags
        run: |
          TAG_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag_sha=${TAG_SHA}" >> $GITHUB_OUTPUT
          echo "tag_latest=latest" >> $GITHUB_OUTPUT
          echo "backend_image=${{ steps.lowercaser.outputs.image_base }}/backend" >> $GITHUB_OUTPUT
          echo "frontend_image=${{ steps.lowercaser.outputs.image_base }}/frontend" >> $GITHUB_OUTPUT

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ steps.image_tags.outputs.backend_image }}:${{ steps.image_tags.outputs.tag_latest }}
            ${{ env.GHCR_REGISTRY }}/${{ steps.image_tags.outputs.backend_image }}:${{ steps.image_tags.outputs.tag_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ steps.image_tags.outputs.frontend_image }}:${{ steps.image_tags.outputs.tag_latest }}
            ${{ env.GHCR_REGISTRY }}/${{ steps.image_tags.outputs.frontend_image }}:${{ steps.image_tags.outputs.tag_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    needs: build-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Define Image Tags for Deployment
        id: image_tags
        run: |
          TAG_SHA=$(echo ${{ github.sha }} | cut -c1-7)

          IMAGE_BASE_LOWER=$(echo "${{ env.IMAGE_BASENAME }}" | tr '[:upper:]' '[:lower:]')
          echo "backend_image=${{ env.GHCR_REGISTRY }}/${IMAGE_BASE_LOWER}/backend:${TAG_SHA}" >> $GITHUB_OUTPUT
          echo "frontend_image=${{ env.GHCR_REGISTRY }}/${IMAGE_BASE_LOWER}/frontend:${TAG_SHA}" >> $GITHUB_OUTPUT

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create remote directory for deployment
        run: ssh -p ${{secrets.SERVER_PORT}} -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ./deployments/rust-actix-web_cd/"

      - name: Transfer files to server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} -i ~/.ssh/deploy_key docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:./deployments/rust-actix-web_cd/
          scp -P ${{ secrets.SERVER_PORT }} -i ~/.ssh/deploy_key ./frontend/nginx.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/rust-actix-web_cd/nginx.conf
          scp -P ${{ secrets.SERVER_PORT }} -i ~/.ssh/deploy_key .deployment/scripts/deploy.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:./deployments/rust-actix-web_cd/

      - name: SSH into server
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}
          cd ./deployments/rust-actix-web_cd

          # Set non-sensitive environment variables for deployment

          echo "IMAGE_BASENAME=${{ env.IMAGE_BASENAME }}" >> $GITHUB_ENV
          echo "GHCR_REGISTRY=${{ env.GHCR_REGISTRY }}" >> $GITHUB_ENV
          echo "GHCR_USER=${{ github.actor }}" >> $GITHUB_ENV

          # Set environment variables for docker-compose from workflow outputs
          export IMAGE_TAG_BACKEND="${{ steps.image_tags.outputs.backend_image }}"
            export IMAGE_TAG_FRONTEND="${{ steps.image_tags.outputs.frontend_image }}"
            export GHCR_REGISTRY="${{ env.GHCR_REGISTRY }}" # Pass registry if needed in compose file
            export GHCR_USER="${{ github.actor }}" # Pass user if needed
            
            # .env non-sensitive variables 
            export COMPOSE_PROJECT_NAME="${{ env.IMAGE_BASENAME }}"
            export RUST_LOG="info"
            export HOST_PORT_FRONTEND="8090"
            export FRONTEND_INTERNAL_PORT="90"
            export BACKEND_INTERNAL_PORT="8091"

          # Deploy via SSH

          echo "$GHCR_PAT_OR_TOKEN" | docker login $GHCR_REGISTRY -u $GITHUB_ACTOR --password-stdin

          ./deploy.sh

          docker logout $GHCR_REGISTRY
