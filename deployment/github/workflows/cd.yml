name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request: # Also run checks on Pull Requests
    branches: [ main ]

env:
  # Base GHCR path - Use lowercase!
  GHCR_REGISTRY: ghcr.io
  # Derive image base name from repo name (lowercase)
  IMAGE_BASENAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  lint-test:
    name: Lint & Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend # Run commands within backend dir

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Check Formatting
        run: cargo fmt -- --check

      - name: Run Clippy
        run: cargo clippy -- -D warnings # Fail on warnings

      - name: Run Tests
        run: cargo test --verbose

  build-push:
    name: Build & Push Docker Images
    needs: lint-test # Run only if lint & test passes
    runs-on: ubuntu-latest
    # Only run on push to main, not on PRs for the push part
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write # To push to GHCR

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase Image Base Name
        id: lowercaser
        run: echo "image_base=$(echo ${{ env.IMAGE_BASENAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Define Image Tags
        id: image_tags
        run: |
          TAG_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "backend_image=${{ steps.lowercaser.outputs.image_base }}/backend" >> $GITHUB_OUTPUT
          echo "frontend_image=${{ steps.lowercaser.outputs.image_base }}/frontend" >> $GITHUB_OUTPUT
          echo "tag_latest=latest" >> $GITHUB_OUTPUT
          echo "tag_sha=${TAG_SHA}" >> $GITHUB_OUTPUT

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ steps.image_tags.outputs.backend_image }}:${{ steps.image_tags.outputs.tag_latest }}
            ${{ env.GHCR_REGISTRY }}/${{ steps.image_tags.outputs.backend_image }}:${{ steps.image_tags.outputs.tag_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ steps.image_tags.outputs.frontend_image }}:${{ steps.image_tags.outputs.tag_latest }}
            ${{ env.GHCR_REGISTRY }}/${{ steps.image_tags.outputs.frontend_image }}:${{ steps.image_tags.outputs.tag_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    needs: build-push # Run only after build-push succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository # Needed for docker-compose.yml
        uses: actions/checkout@v4

      - name: Lowercase Image Base Name # Repeat for deploy job or pass via outputs
        id: lowercaser
        run: echo "image_base=$(echo ${{ env.IMAGE_BASENAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Define Image Tags # Repeat for deploy job or pass via outputs
        id: image_tags
        run: |
          TAG_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "backend_image_tag=${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/backend:${{ steps.image_tags.outputs.tag_sha }}" >> $GITHUB_OUTPUT
          echo "frontend_image_tag=${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/frontend:${{ steps.image_tags.outputs.tag_sha }}" >> $GITHUB_OUTPUT
          # Or use ':latest' if preferred for deployment simplicity
          # echo "backend_image_tag=${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/backend:latest" >> $GITHUB_OUTPUT
          # echo "frontend_image_tag=${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/frontend:latest" >> $GITHUB_OUTPUT

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # Variables
            export DEPLOY_DIR="/opt/my-web-app" # CHANGE THIS PATH if needed
            export COMPOSE_FILE="${{ github.workspace }}/docker-compose.yml" # Path in runner
            export ENV_FILE_CONTENT="${{ secrets.ENV_FILE }}" # Content from secret
            # Use specific commit SHA tags for deployment
            export IMAGE_TAG_BACKEND="${{ steps.image_tags.outputs.backend_image_tag }}"
            export IMAGE_TAG_FRONTEND="${{ steps.image_tags.outputs.frontend_image_tag }}"
            export GHCR_PAT="${{ secrets.GHCR_PAT_OR_TOKEN }}"
            export GHCR_USER="${{ github.actor }}"
            export GHCR_REGISTRY="${{ env.GHCR_REGISTRY }}"

            echo "--- Starting Deployment ---"
            echo "Deploy Directory: $DEPLOY_DIR"
            echo "Backend Image: $IMAGE_TAG_BACKEND"
            echo "Frontend Image: $IMAGE_TAG_FRONTEND"

            # Create deployment directory
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR

            # Create the .env file from GitHub Secret
            echo "Creating .env file..."
            echo "$ENV_FILE_CONTENT" > .env
            # Ensure correct permissions if needed
            # chmod 600 .env

            # Copy docker-compose.yml from checkout
            echo "Copying docker-compose.yml..."
            cp $COMPOSE_FILE .

            # Login to GHCR
            echo "Logging into $GHCR_REGISTRY..."
            echo "$GHCR_PAT" | docker login $GHCR_REGISTRY -u $GHCR_USER --password-stdin

            # Pull the specific new images defined by tags
            # docker-compose pull will use IMAGE_TAG_* vars defined in the environment
            # which override the image definitions in docker-compose.yml
            echo "Pulling latest images..."
            docker-compose pull

            # Stop and remove old containers, networks, and volumes defined in compose
            # Then start new containers with the new images and config
            echo "Restarting services with docker-compose up..."
            docker-compose up -d --remove-orphans # Use --remove-orphans to clean up old services if compose file changed

            # Clean up unused Docker images (optional)
            echo "Pruning unused Docker images..."
            docker image prune -af

            # Logout from GHCR
            echo "Logging out from $GHCR_REGISTRY..."
            docker logout $GHCR_REGISTRY

            echo "--- Deployment Successful ---"